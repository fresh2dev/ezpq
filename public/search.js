window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "ezpq", "modulename": "ezpq", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "ezpq.FinishedJob", "modulename": "ezpq.FinishedJob", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "ezpq.FinishedJob.FinishedJob", "modulename": "ezpq.FinishedJob", "qualname": "FinishedJob", "type": "class", "doc": "<p></p>\n"}, {"fullname": "ezpq.FinishedJob.FinishedJob.__init__", "modulename": "ezpq.FinishedJob", "qualname": "FinishedJob.__init__", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "job"], "funcdef": "def"}, {"fullname": "ezpq.FinishedJob.FinishedJob.compare", "modulename": "ezpq.FinishedJob", "qualname": "FinishedJob.compare", "type": "function", "doc": "<p>compares two jobs by priority or index.</p>\n\n<h6 id=\"arguments\">Arguments</h6>\n\n<blockquote>\n  <p>job {ezpq.Job}</p>\n</blockquote>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>int -- <code>1</code> if <code>self</code> is greater than comparison,\n        <code>-1</code> if <code>self</code> is less than,\n        <code>0</code> if equal.</p>\n</blockquote>\n", "parameters": ["self", "job"], "funcdef": "def"}, {"fullname": "ezpq.Job", "modulename": "ezpq.Job", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "ezpq.Job.Job", "modulename": "ezpq.Job", "qualname": "Job", "type": "class", "doc": "<p>used internally in <code>ezpq.Queue</code>.\ndefines what to run, with what priority, and other options.</p>\n"}, {"fullname": "ezpq.Job.Job.__init__", "modulename": "ezpq.Job", "qualname": "Job.__init__", "type": "function", "doc": "<h6 id=\"required-arguments\">Required Arguments</h6>\n\n<blockquote>\n  <p>fun {Callable}</p>\n</blockquote>\n\n<h6 id=\"keyword-arguments\">Keyword Arguments</h6>\n\n<blockquote>\n  <p>args {Sequence[Any]} -- (default: {None})\n  kwargs {Mapping[str, Any]} -- (default: {None})\n  name {Optional[str]} -- (default: {None})\n  priority {Optional[int]} -- (default: {100})\n  lane {Optional[int]} -- (default: {None})\n  suppress_errors {Optional[bool]} -- (default: {False})\n  skip_on_lane_error {Optional[bool]} -- (default: {False})</p>\n</blockquote>\n", "parameters": ["self", "fun", "args", "kwargs", "name", "priority", "lane", "timeout", "suppress_errors", "skip_on_lane_error"], "funcdef": "def"}, {"fullname": "ezpq.Job.Job.compare", "modulename": "ezpq.Job", "qualname": "Job.compare", "type": "function", "doc": "<p>compares two jobs by priority or index.</p>\n\n<h6 id=\"arguments\">Arguments</h6>\n\n<blockquote>\n  <p>job {ezpq.Job}</p>\n</blockquote>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>int -- <code>1</code> if <code>self</code> is greater than comparison,\n        <code>-1</code> if <code>self</code> is less than,\n        <code>0</code> if equal.</p>\n</blockquote>\n", "parameters": ["self", "job"], "funcdef": "def"}, {"fullname": "ezpq.Job.Job.is_running", "modulename": "ezpq.Job", "qualname": "Job.is_running", "type": "function", "doc": "<p><code>True</code> if the inner job/thread is alive,\nelse <code>False</code>.</p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "ezpq.Job.Job.is_expired", "modulename": "ezpq.Job", "qualname": "Job.is_expired", "type": "function", "doc": "<p><code>True</code> if the job is running and its timeout is exceeded,\nelse <code>False</code>.</p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "ezpq.Job.Job.join", "modulename": "ezpq.Job", "qualname": "Job.join", "type": "function", "doc": "<p>waits for the job/thread to complete.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "ezpq.Job.Job.exitcode", "modulename": "ezpq.Job", "qualname": "Job.exitcode", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "ezpq.Job.Job.terminate", "modulename": "ezpq.Job", "qualname": "Job.terminate", "type": "function", "doc": "<p></p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "ezpq.Job.Job.stop", "modulename": "ezpq.Job", "qualname": "Job.stop", "type": "function", "doc": "<p>Terminates an existing process. Does not work for threads.</p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "ezpq.Job.Job.running_time", "modulename": "ezpq.Job", "qualname": "Job.running_time", "type": "function", "doc": "<p>Returns the runtime of a completed data.\nIncludes actual start time to finish time, not any overhead after.</p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "ezpq.Job.Job.waiting_time", "modulename": "ezpq.Job", "qualname": "Job.waiting_time", "type": "function", "doc": "<p>Returns the amount of time a data has spent in the waiting queue.</p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "ezpq.Job.Job.total_time", "modulename": "ezpq.Job", "qualname": "Job.total_time", "type": "function", "doc": "<p>Returns the total time a completed data spent in the ezpq.Queue system.\nIncludes actual submit time to finish time, not any overhead after.</p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "ezpq.Job.Job.get_submit_time", "modulename": "ezpq.Job", "qualname": "Job.get_submit_time", "type": "function", "doc": "<p>Returns a datetime object of the time this data was submitted.</p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "ezpq.Job.Job.get_start_time", "modulename": "ezpq.Job", "qualname": "Job.get_start_time", "type": "function", "doc": "<p>Returns a datetime object of the time this data was started.</p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "ezpq.Job.Job.get_end_time", "modulename": "ezpq.Job", "qualname": "Job.get_end_time", "type": "function", "doc": "<p>Returns a datetime object of the time this data finished.</p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "ezpq.Job.Job.get_processed_time", "modulename": "ezpq.Job", "qualname": "Job.get_processed_time", "type": "function", "doc": "<p>Returns a datetime object of the time this data was processed.</p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "ezpq.Job.Job.is_processed", "modulename": "ezpq.Job", "qualname": "Job.is_processed", "type": "function", "doc": "<p>Returns true if this data has been processed; false otherwise.\nA processed data is one that has had its output gathered, callback called,\n  before being removed from the working dictionary.</p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "ezpq.Job.Job.cancelled", "modulename": "ezpq.Job", "qualname": "Job.cancelled", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "ezpq.Job.Job.idx", "modulename": "ezpq.Job", "qualname": "Job.idx", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "ezpq.Job.Job.suppress_errors", "modulename": "ezpq.Job", "qualname": "Job.suppress_errors", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "ezpq.Job.Job.priority", "modulename": "ezpq.Job", "qualname": "Job.priority", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "ezpq.Job.Job.qid", "modulename": "ezpq.Job", "qualname": "Job.qid", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "ezpq.Job.Job.output", "modulename": "ezpq.Job", "qualname": "Job.output", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "ezpq.Job.Job.exception_txt", "modulename": "ezpq.Job", "qualname": "Job.exception_txt", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "ezpq.Job.Job.callback", "modulename": "ezpq.Job", "qualname": "Job.callback", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "ezpq.Plot", "modulename": "ezpq.Plot", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "ezpq.Plot.Plot", "modulename": "ezpq.Plot", "qualname": "Plot", "type": "class", "doc": "<p>Functions to produce Gantt chart from completed a <code>ezpq.FinishedJob</code></p>\n"}, {"fullname": "ezpq.Plot.Plot.__init__", "modulename": "ezpq.Plot", "qualname": "Plot.__init__", "type": "function", "doc": "<p>[summary]</p>\n\n<h6 id=\"arguments\">Arguments</h6>\n\n<blockquote>\n  <p>jobs {Union[List[FinishedJob], pd.DataFrame]} -- list of <code>ezpq.FinishedJob</code> objects.</p>\n</blockquote>\n", "parameters": ["self", "jobs"], "funcdef": "def"}, {"fullname": "ezpq.Plot.Plot.build", "modulename": "ezpq.Plot", "qualname": "Plot.build", "type": "function", "doc": "<p>Produces a plot based on the data and options provided to a <code>ezpq.Plot()</code> object.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>color_pal:</strong> </li>\n<li><strong>color_by:</strong>  controls the column to use for coloring the bars.\n<ul>\n<li>Accepts: one of 'qid', 'priority', 'lane', 'cancelled', 'exitcode', 'name', 'output'</li>\n<li>Default: 'qid'</li>\n</ul></li>\n<li><strong>facet_by:</strong>  controls the column to use for facetting the plot.\n<ul>\n<li>Accepts: one of 'qid', 'priority', 'lane', 'cancelled', 'exitcode', 'name', 'output'</li>\n<li>Default: 'qid'</li>\n</ul></li>\n<li><strong>facet_scale:</strong>  controls the scale of the x/y axis across facets.\n<ul>\n<li>Accepts: one of 'fixed', 'free', 'free_x', 'free_y'</li>\n<li>Default: 'fixed'</li>\n</ul></li>\n<li><strong>show_legend:</strong>  controls whether the legend is drawn.\n<ul>\n<li>Accepts: bool</li>\n<li>Default: True</li>\n</ul></li>\n<li><strong>bar_width:</strong>  controls the bar width\n<ul>\n<li>Accepts: float</li>\n<li>Default: 1</li>\n</ul></li>\n<li><strong>title:</strong>  optional title to be drawn above the plot.\n<ul>\n<li>Accepts: str, None</li>\n<li>Default: None</li>\n</ul></li>\n<li><strong>theme:</strong>  - Accepts: 'bw', 'classic', 'gray', 'grey', 'seaborn', '538', 'dark', 'matplotlib', 'minimal', 'xkcd', 'light'\n<ul>\n<li>Default: 'bw'</li>\n</ul></li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The plot produced from plotnine.ggplot().</p>\n</blockquote>\n", "parameters": ["self", "color_by", "facet_by", "facet_scale", "show_legend", "bar_width", "title", "color_pal", "theme"], "funcdef": "def"}, {"fullname": "ezpq.Queue", "modulename": "ezpq.Queue", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "ezpq.Queue.Queue", "modulename": "ezpq.Queue", "qualname": "Queue", "type": "class", "doc": "<p></p>\n"}, {"fullname": "ezpq.Queue.Queue.__init__", "modulename": "ezpq.Queue", "qualname": "Queue.__init__", "type": "function", "doc": "<p>Implements a parallel queueing system.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>workers:</strong>  the max number of concurrent jobs.\n<ul>\n<li>Accepts: int</li>\n<li>Default: cpu_count()</li>\n</ul></li>\n<li><strong>max_size:</strong>  when &gt; 0, will throw an exception the number of enqueued jobs exceeds this value. Otherwise, no limit.\n<ul>\n<li>Accepts: int</li>\n<li>Default: 0 (unlimited)</li>\n</ul></li>\n<li><strong>engine:</strong>  the class to use to invoke new jobs.\n<ul>\n<li>Accepts: multiprocessing.Process, threading.Thread</li>\n<li>Default: multiprocessing.Process</li>\n</ul></li>\n<li><strong>auto_remove:</strong>  controls whether jobs are discarded of after completion.\n<ul>\n<li>Accepts: bool</li>\n<li>Default: False</li>\n</ul></li>\n<li><strong>start:</strong>  controls whether the queue system \"pulse\" is started upon instantiation (default), or manually.\n<ul>\n<li>Accepts: bool</li>\n<li>Default: True</li>\n</ul></li>\n<li><strong>stop_when_empty:</strong>  controls whether the queue system \"pulse\" stops itself after all jobs are complete.\n<ul>\n<li>Accepts: bool</li>\n<li>Default: False</li>\n</ul></li>\n<li><strong>callback:</strong>  optional fun to execute synchronously immediately after a data completes.\n<ul>\n<li>Accepts: fun object</li>\n<li>Default: None</li>\n</ul></li>\n<li><strong>output_file:</strong>  if file path is specified, data data is written to this path in CSV format.\n<ul>\n<li>Accepts: str</li>\n<li>Default: None</li>\n</ul></li>\n<li><strong>pulse_freq:</strong>  controls the pulse frequency; the amount of time slept between operations.\n<ul>\n<li>Accepts: float</li>\n<li>Default: 0.1</li>\n</ul></li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>ezpq.Queue object.</p>\n</blockquote>\n", "parameters": ["self", "workers", "engine", "name", "auto_remove", "start", "stop_when_empty", "callback", "output_file", "pulse_freq", "show_progress", "max_size"], "funcdef": "def"}, {"fullname": "ezpq.Queue.Queue.RepeatedTimer", "modulename": "ezpq.Queue", "qualname": "Queue.RepeatedTimer", "type": "class", "doc": "<p>Periodically runs a function in a background thread.\nfrom: https://stackoverflow.com/a/13151299</p>\n\n<p>used to run <code>ezpq.Queue._pulse</code> asynchronously.</p>\n"}, {"fullname": "ezpq.Queue.Queue.RepeatedTimer.__init__", "modulename": "ezpq.Queue", "qualname": "Queue.RepeatedTimer.__init__", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "interval", "fun", "args", "kwargs"], "funcdef": "def"}, {"fullname": "ezpq.Queue.Queue.RepeatedTimer.start", "modulename": "ezpq.Queue", "qualname": "Queue.RepeatedTimer.start", "type": "function", "doc": "<p></p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "ezpq.Queue.Queue.RepeatedTimer.stop", "modulename": "ezpq.Queue", "qualname": "Queue.RepeatedTimer.stop", "type": "function", "doc": "<p></p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "ezpq.Queue.Queue.RepeatedTimer.is_running", "modulename": "ezpq.Queue", "qualname": "Queue.RepeatedTimer.is_running", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "ezpq.Queue.Queue.RepeatedTimer.is_enabled", "modulename": "ezpq.Queue", "qualname": "Queue.RepeatedTimer.is_enabled", "type": "function", "doc": "<p></p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "ezpq.Queue.Queue.start", "modulename": "ezpq.Queue", "qualname": "Queue.start", "type": "function", "doc": "<p>Starts the queue system pulse.</p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "ezpq.Queue.Queue.stop", "modulename": "ezpq.Queue", "qualname": "Queue.stop", "type": "function", "doc": "<p>Stops the queue system pulse.</p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "ezpq.Queue.Queue.dispose", "modulename": "ezpq.Queue", "qualname": "Queue.dispose", "type": "function", "doc": "<p>Clears all output and stops the queue system pulse.</p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "ezpq.Queue.Queue.clear_waiting", "modulename": "ezpq.Queue", "qualname": "Queue.clear_waiting", "type": "function", "doc": "<p></p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "ezpq.Queue.Queue.stop_all", "modulename": "ezpq.Queue", "qualname": "Queue.stop_all", "type": "function", "doc": "<p>Stops working jobs and clears waiting jobs.</p>\n", "parameters": ["self", "wait"], "funcdef": "def"}, {"fullname": "ezpq.Queue.Queue.n_submitted", "modulename": "ezpq.Queue", "qualname": "Queue.n_submitted", "type": "function", "doc": "<p>Returns the total number of jobs that have entered the queueing system.</p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "ezpq.Queue.Queue.n_completed", "modulename": "ezpq.Queue", "qualname": "Queue.n_completed", "type": "function", "doc": "<p>Returns the total number of jobs that have been completed.</p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "ezpq.Queue.Queue.n_workers", "modulename": "ezpq.Queue", "qualname": "Queue.n_workers", "type": "function", "doc": "<p>Returns max concurrency limit.</p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "ezpq.Queue.Queue.size", "modulename": "ezpq.Queue", "qualname": "Queue.size", "type": "function", "doc": "<p>Returns the number of jobs in the corresponding queue(s).</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>waiting:</strong>  include jobs in the waiting queue?\n<ul>\n<li>Accepts: bool</li>\n<li>Default: False</li>\n</ul></li>\n<li><strong>working:</strong>  include jobs in the working table?\n<ul>\n<li>Accepts: bool</li>\n<li>Default: False</li>\n</ul></li>\n<li><strong>completed:</strong>  include jobs in the completed queue?\n<ul>\n<li>Accepts: bool</li>\n<li>Default: False</li>\n</ul></li>\n</ul>\n\n<p>Note: when all are False, all jobs are counted (default).</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>int</p>\n</blockquote>\n", "parameters": ["self", "waiting", "working", "completed"], "funcdef": "def"}, {"fullname": "ezpq.Queue.Queue.n_workers_free", "modulename": "ezpq.Queue", "qualname": "Queue.n_workers_free", "type": "function", "doc": "<p>Returns the number of available processes.</p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "ezpq.Queue.Queue.working", "modulename": "ezpq.Queue", "qualname": "Queue.working", "type": "function", "doc": "<p>True if there are running jobs.</p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "ezpq.Queue.Queue.busy", "modulename": "ezpq.Queue", "qualname": "Queue.busy", "type": "function", "doc": "<p>True if max concurrent limit (n_workers) is reached or if there are waiting jobs.</p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "ezpq.Queue.Queue.empty", "modulename": "ezpq.Queue", "qualname": "Queue.empty", "type": "function", "doc": "<p>True if there are no jobs in the queue system.</p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "ezpq.Queue.Queue.full", "modulename": "ezpq.Queue", "qualname": "Queue.full", "type": "function", "doc": "<p>True if the number of jobs in the queue system is equal to max_size.</p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "ezpq.Queue.Queue.count_remaining", "modulename": "ezpq.Queue", "qualname": "Queue.count_remaining", "type": "function", "doc": "<p>The difference between the number of jobs submitted and the number completed.</p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "ezpq.Queue.Queue.wait_worker", "modulename": "ezpq.Queue", "qualname": "Queue.wait_worker", "type": "function", "doc": "<p>Waits for the number of running jobs to fall below the max concurrent limit (n_workers)</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>pulse_freq:</strong>  the time, in seconds, between checks.\n<ul>\n<li>Accepts: float</li>\n<li>Default: ezpq.Queue.pulse_freq</li>\n</ul></li>\n<li><strong>timeout:</strong>  when &gt; 0, the maximum time to wait, in seconds. Otherwise, no limit.\n<ul>\n<li>Accepts: float</li>\n<li>Default: 0 (unlimited)</li>\n</ul></li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>True if a worker is available; False otherwise.</p>\n</blockquote>\n", "parameters": ["self", "pulse_freq", "timeout"], "funcdef": "def"}, {"fullname": "ezpq.Queue.Queue.wait", "modulename": "ezpq.Queue", "qualname": "Queue.wait", "type": "function", "doc": "<p>Waits for jobs to be completed by the queue system.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>poll:</strong>  the time, in seconds, between checks.\n<ul>\n<li>Accepts: float</li>\n<li>Default: ezpq.Queue.pulse_freq</li>\n</ul></li>\n<li><strong>timeout:</strong>  when &gt; 0, the maximum time to wait, in seconds. Otherwise, no limit.\n<ul>\n<li>Accepts: float</li>\n<li>Default: 0 (unlimited)</li>\n</ul></li>\n<li><strong>show_progress:</strong>  show <code>tqdm</code> progress bar; (pass static_args to <code>waitpb</code>)\n<ul>\n<li>Accepts: bool</li>\n<li>Default: False</li>\n</ul></li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>0 if the expected number of jobs completed. &gt; 0 otherwise.</p>\n</blockquote>\n", "parameters": ["self", "poll", "timeout", "show_progress"], "funcdef": "def"}, {"fullname": "ezpq.Queue.Queue.waitpb", "modulename": "ezpq.Queue", "qualname": "Queue.waitpb", "type": "function", "doc": "<p>Waits for jobs to be completed by the queue system.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>poll:</strong>  the time, in seconds, between checks.\n<ul>\n<li>Accepts: float</li>\n<li>Default: ezpq.Queue.pulse_freq</li>\n</ul></li>\n<li><strong>timeout:</strong>  when &gt; 0, the maximum time to wait, in seconds. Otherwise, no limit.\n<ul>\n<li>Accepts: float</li>\n<li>Default: 0 (unlimited)</li>\n</ul></li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>0 if the expected number of jobs completed. &gt; 0 otherwise.</p>\n</blockquote>\n", "parameters": ["self", "poll", "timeout"], "funcdef": "def"}, {"fullname": "ezpq.Queue.Queue.submit", "modulename": "ezpq.Queue", "qualname": "Queue.submit", "type": "function", "doc": "<p>Submits a data into the ezpq.Queue system.</p>\n\n<h6 id=\"throws-an-exception-if\">Throws an exception if</h6>\n\n<blockquote>\n  <ol>\n  <li>the Queue uses a Thread job_runner and this data has a timeout (can't terminate Threads),</li>\n  <li>the Queue max_size will be exceeded after adding this data.</li>\n  </ol>\n</blockquote>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The number of jobs submitted to the queue.</p>\n</blockquote>\n", "parameters": ["self", "job"], "funcdef": "def"}, {"fullname": "ezpq.Queue.Queue.put", "modulename": "ezpq.Queue", "qualname": "Queue.put", "type": "function", "doc": "<p>Creates a data and submits it to an ezpq queue.\nsee <code>help(ezpq.Job.__init__)</code></p>\n", "parameters": ["self", "args", "kwargs"], "funcdef": "def"}, {"fullname": "ezpq.Queue.Queue.map", "modulename": "ezpq.Queue", "qualname": "Queue.map", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "fun", "iterable", "static_args", "static_kwargs", "timeout", "show_progress"], "funcdef": "def"}, {"fullname": "ezpq.Queue.Queue.starmap", "modulename": "ezpq.Queue", "qualname": "Queue.starmap", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "fun", "iterable", "static_args", "static_kwargs", "timeout", "show_progress"], "funcdef": "def"}, {"fullname": "ezpq.Queue.Queue.starmapkw", "modulename": "ezpq.Queue", "qualname": "Queue.starmapkw", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "fun", "iterable", "static_args", "static_kwargs", "timeout", "show_progress"], "funcdef": "def"}, {"fullname": "ezpq.Queue.Queue.get", "modulename": "ezpq.Queue", "qualname": "Queue.get", "type": "function", "doc": "<p>Pops the highest priority item from the completed queue.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>wait:</strong> </li>\n<li><strong>pulse_freq:</strong>  when &gt; 0, time between checks\n<ul>\n<li>Accepts: float</li>\n<li>Default: 0 (no wait)</li>\n</ul></li>\n<li><strong>timeout:</strong>  the maximum time, in seconds, to wait for a data to complete.\n<ul>\n<li>Accepts: float</li>\n<li>Default: 0 (no wait/unlimited wait)</li>\n</ul></li>\n</ul>\n\n<h6 id=\"notes\">Notes</h6>\n\n<blockquote>\n  <ul>\n  <li>when both poll and timeout are 0, only one check is done;</li>\n  <li>when either is &gt; 0, the method will block until output is available.</li>\n  </ul>\n</blockquote>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Dictionary of the most recently completed, highest priority data.</p>\n</blockquote>\n", "parameters": ["self", "wait", "pulse_freq", "timeout"], "funcdef": "def"}, {"fullname": "ezpq.Queue.Queue.collect", "modulename": "ezpq.Queue", "qualname": "Queue.collect", "type": "function", "doc": "<p>Repeatedly calls <code>get()</code> and returns a list of data data.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>n:</strong>  the number of jobs to pop from the completed queue.\n<ul>\n<li>Accepts: int</li>\n<li>Default: 0 (all)</li>\n</ul></li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>a list of dictionary objects.</p>\n</blockquote>\n", "parameters": ["self", "n"], "funcdef": "def"}, {"fullname": "ezpq.Queue.Queue.workers", "modulename": "ezpq.Queue", "qualname": "Queue.workers", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "ezpq.Queue.Queue.max_size", "modulename": "ezpq.Queue", "qualname": "Queue.max_size", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "ezpq.Queue.Queue.is_running", "modulename": "ezpq.Queue", "qualname": "Queue.is_running", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "ezpq.utils", "modulename": "ezpq.utils", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "ezpq.utils.get_logger", "modulename": "ezpq.utils", "qualname": "get_logger", "type": "function", "doc": "<p>get or create a logger.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li>name (str)</li>\n<li><strong>level (Optional[int]):</strong>  Defaults to logging.DEBUG.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>logging.Logger</p>\n</blockquote>\n", "parameters": ["name", "level"], "funcdef": "def"}, {"fullname": "ezpq.utils.compare", "modulename": "ezpq.utils", "qualname": "compare", "type": "function", "doc": "<p>compare two numbers.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>num1 (Union[int, float]):</strong>  the reference number.</li>\n<li><strong>num2 (Union[int, float]):</strong>  the comparison number.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>int:\n      * 0  if num1 == num2\n      * 1  if num1 &gt; num2\n      * -1 if num1 &lt; num2</p>\n</blockquote>\n", "parameters": ["num1", "num2"], "funcdef": "def"}, {"fullname": "ezpq.utils.compare_by", "modulename": "ezpq.utils", "qualname": "compare_by", "type": "function", "doc": "<p>compare two objects by a list of attributes.\nattributes are compared in-order and the comparison will\nshort-circuit if objects are not equal.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>_state:</strong> </li>\n<li><strong>object1 (object):</strong>  the reference object.</li>\n<li><strong>object2 (object):</strong>  the comparison object.</li>\n<li><strong>by (List[str]):</strong>  list of attributes to compare.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>int:\n      * 0  if object1 == object2\n      * 1  if object1 &gt; object2\n      * -1 if object1 &lt; object2</p>\n</blockquote>\n", "parameters": ["object1", "object2", "by", "_state"], "funcdef": "def"}, {"fullname": "ezpq.utils.log_csv", "modulename": "ezpq.utils", "qualname": "log_csv", "type": "function", "doc": "<p></p>\n", "parameters": ["data", "path", "append"], "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.addField("qualname");
            this.addField("fullname");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();